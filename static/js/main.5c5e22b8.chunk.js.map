{"version":3,"sources":["types/SortTypes.ts","App.tsx","index.tsx"],"names":["SortTypes","goodsFromServer","App","useState","none","sortField","setSortField","reversed","setReversed","visibleGoods","goods","prepearedGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,6EAAAA,K,YAAAA,E,0BAAAA,E,iBAAAA,M,gBCQCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA2BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,MAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACMC,EA3BR,SAA0BC,EAA1B,GAA+E,IAApCL,EAAmC,EAAnCA,UAAWE,EAAwB,EAAxBA,SAC9CI,EAAc,YAAOD,GAoB3B,OAlBIL,GACFM,EAAeC,MAAK,SAACC,EAAOC,GAC1B,OAAQT,GACN,KAAKL,EAAUe,SACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,OACb,OAAOJ,EAAMI,OAASH,EAAMG,OAC9B,QACE,OAAO,MAKXV,GACFI,EAAeO,UAGVP,EAMcQ,CACnBlB,EACA,CAAEI,YAAWE,aAOf,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaN,EAAUe,WACtCO,KAAK,SACLF,UAAS,yBAAoBG,IAAG,CAAE,WAAYlB,IAAcL,EAAUe,YAHxE,iCAQA,wBACEM,QAAS,kBAAMf,EAAaN,EAAUiB,SACtCK,KAAK,SACLF,UAAS,4BAAuBG,IAAG,CAAE,WAAYlB,IAAcL,EAAUiB,UAH3E,4BAQA,wBACEI,QAAS,kBAAMb,GAAaD,IAC5Be,KAAK,SACLF,UAAS,4BAAuBG,IAAG,CAAE,YAAyB,IAAbhB,KAHnD,sBAQEF,IAAcL,EAAUI,MAAQG,IAChC,wBACEc,QAlCI,WACZf,EAAaN,EAAUI,MACvBI,GAAY,IAiCJc,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC9FlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5c5e22b8.chunk.js","sourcesContent":["export enum SortTypes {\n  none = 'none',\n  alphabet = 'alphabetically',\n  length = 'length',\n}\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { Good } from './types/good';\nimport { SortParams } from './types/SortParams';\nimport { SortTypes } from './types/SortTypes';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods: Good[], { sortField, reversed }: SortParams) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortTypes.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortTypes.length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortTypes.none);\n  const [reversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, reversed },\n  );\n  const reset = () => {\n    setSortField(SortTypes.none);\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortTypes.alphabet)}\n          type=\"button\"\n          className={`button is-info ${cn({ 'is-light': sortField !== SortTypes.alphabet })}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortTypes.length)}\n          type=\"button\"\n          className={`button is-success ${cn({ 'is-light': sortField !== SortTypes.length })}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReversed(!reversed)}\n          type=\"button\"\n          className={`button is-warning ${cn({ 'is-light': reversed === false })}`}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== SortTypes.none || reversed) && (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}